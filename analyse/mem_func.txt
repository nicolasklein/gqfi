# Sets the variable $pattern to a value of either 32 or 64 bit,
# according to the type of machine (32 or 64 bit)
define create_pattern
  if (sizeof(void*) == 4)
    set $pattern = 0xabcddcba
    set $returnValue = 4
  end
  if (sizeof(void*) == 8)
    set $pattern = 0xabcddcbaabcddcba
    set $returnValue = 8
  end
end


# Write pattern to a memory region
# $arg0 = Start of mem region
# $arg1 = End of mem region
define write_pattern
  set $adr = (void**)$arg0
  while ($adr != (void**)$arg1)
    set *$adr = $pattern
    set $adr = $adr +1
  end
end


# Reads the pattern back from a stack region
# The first address, where the pattern changes
# is stored in $retval
define read_pattern_stack
  set $adr = (void**)$arg0
  set $retval = 0
  while ($adr != (void**)$arg1 && $retval == 0)
    if (*$adr != $pattern)
      set $retval = $adr
    end
    set $adr = $adr +1 
  end
end


# Reads the pattern from a memory region
# Returns start addr  and end addr of region, where the pattern has changed
define read_pattern_until_change
  set $adr = (void**)$arg0
  set $start_of_change = 0
  set $end_of_change = 0

  #Get start of change
  while ($adr != (void**)$arg1 && $start_of_change == 0)
    if (*$adr != $pattern)
      set $start_of_change = $adr
    end
    set $adr = $adr +1 
  end

  #Get end of change
  while ($adr != (void**)$arg1 && $end_of_change == 0)
    if (*$adr == $pattern)
      set $end_of_change = $adr -1
    end
    set $adr = $adr +1
  end
end
